{"version":3,"sources":["context/actions/types.js","context/reducers/generalReducer.js","context/initial/initialStates.js","context/reducers/reducers.js","context/store/storeContext.js","App.js","serviceWorker.js","index.js","context/actions/actions.js"],"names":["types","INCREMENT","DECREMENT","RESET","VALUE20","generalReducer","state","action","type","Object","objectSpread","count","data","Error","initialState","generalStates","reducer","arguments","length","undefined","StoreContext","createContext","App","_useContext","useContext","actions","react_default","a","createElement","onClick","increment","decrement","reset","value20","Boolean","window","location","hostname","match","ReactDOM","render","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useActions","useEffect","console","log","newState","Provider","value","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kJAAaA,EAAQ,CACjBC,UAAW,YACXC,UAAW,YACXC,MAAM,QACNC,QAAS,WCGAC,EAAiB,SAACC,EAAOC,GACpC,OAAQA,EAAOC,MACb,KAAKR,EAAMC,UACT,OAAOQ,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAOL,EAAMK,MAAQ,IAEzB,KAAKX,EAAME,UACT,OAAOO,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAOL,EAAMK,MAAQ,IAEzB,KAAKX,EAAMG,MACT,OAAOM,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAO,IAEX,KAAKX,EAAMI,QACT,OAAOK,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAOJ,EAAOK,OAElB,QACE,MAAM,IAAIC,MAAM,uBC3BTC,EAAe,CAC1BC,cDD2B,CAC3BJ,MAAO,IECHK,EAAU,WAAkC,IAAjCV,EAAiCW,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcP,EAAWU,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,MAAO,CACLJ,cAAeV,EAAeC,EAAMS,cAAcR,KCHhDa,EAAeC,wBAAcP,GCUpBQ,EAXH,WAAM,IAAAC,EACWC,qBAAWJ,GAA9Bd,EADQiB,EACRjB,MAAOmB,EADCF,EACDE,QACf,OAAOC,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,SAAItB,EAAMS,cAAcJ,OACxBe,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAKJ,EAAQK,cAA9B,aACAJ,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAKJ,EAAQM,cAA9B,aACAL,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAKJ,EAAQO,UAA9B,SACAN,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAKJ,EAAQQ,QAAQ,MAAtC,cCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPd,EAAAC,EAAAC,cHDoB,SAAAa,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EAEZC,qBAAW5B,EAASF,GAFR+B,EAAApC,OAAAqC,EAAA,EAAArC,CAAAkC,EAAA,GAE/BrC,EAF+BuC,EAAA,GAExBE,EAFwBF,EAAA,GAKhCpB,EIJkB,SAACnB,EAAOyC,GAahC,MAAO,CACLjB,UAbF,WACEiB,EAAS,CAAEvC,KAAMR,EAAMC,aAavB8B,UAXF,WACEgB,EAAS,CAAEvC,KAAMR,EAAME,aAWvB8B,MATF,WACEe,EAAS,CAAEvC,KAAMR,EAAMG,SASvB8B,QAPF,SAAiBrB,GACfmC,EAAS,CAAEvC,KAAMR,EAAMI,QAASQ,WJPlBoC,CAAW1C,EAAOyC,GAMlC,OAHAE,oBAAU,kBAAMC,QAAQC,IAAI,CAAEC,SAAU9C,KAAU,CAACA,IAIjDoB,EAAAC,EAAAC,cAACR,EAAaiC,SAAd,CAAuBC,MAAO,CAAEhD,QAAOyC,WAAUtB,YAC9CiB,IGZL,KACEhB,EAAAC,EAAAC,cAAC2B,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.852395f1.chunk.js","sourcesContent":["export const types = {\n    INCREMENT: \"INCREMENT\",\n    DECREMENT: \"DECREMENT\",\n    RESET:\"RESET\",\n    VALUE20: \"VALUE20\"\n  };","import { types } from \"../actions/types\";\n\n//Se exporta para luego pasarlos al initialStates\nexport const generalStates = {\n  count: 0\n}\n\nexport const generalReducer = (state, action) => {\n  switch (action.type) {\n    case types.INCREMENT:\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    case types.DECREMENT:\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    case types.RESET:\n      return {\n        ...state,\n        count: 0\n      };\n    case types.VALUE20:\n      return {\n        ...state,\n        count: action.data\n      };\n    default:\n      throw new Error(\"Unexpected action\");\n  }\n};\n","import {Â generalStates } from '../reducers/generalReducer'\n\n//Index con todos los states sacados de los reduces por separado\nexport const initialState = {\n  generalStates\n};\n","import { initialState } from \"../initial/initialStates\";\nimport { types } from \"../actions/types\";\nimport { generalReducer } from './generalReducer'\n\n//Retorna los states separados, los cuales tienen el reducer separado y se les pasa su state y la action\nconst reducer = (state = initialState, action) => {\n  return {\n    generalStates: generalReducer(state.generalStates,action)\n  }\n};\n\nexport { initialState, types, reducer };\n","import { initialState, reducer } from \"../reducers/reducers\";\nimport { useActions } from \"../actions/actions\";\nimport React, { createContext, useReducer, useEffect } from \"react\";\n\nconst StoreContext = createContext(initialState);\n\nconst StoreProvider = ({ children }) => {\n  // Get state and dispatch from Reacts new API useReducer.\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // Get actions from useActions and pass it to Context\n  const actions = useActions(state, dispatch);\n\n  // Log new state\n  useEffect(() => console.log({ newState: state }), [state]);\n\n  // Render state, dispatch and special case actions\n  return (\n    <StoreContext.Provider value={{ state, dispatch, actions }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\nexport { StoreContext, StoreProvider };\n","import React, { useContext } from \"react\";\nimport { StoreContext } from \"./context/store/storeContext\";\n\nconst App = () => {\n  const { state, actions } = useContext(StoreContext);\n  return <div>\n    <p>{state.generalStates.count}</p>\n    <button onClick={()=>{actions.increment()}}>INCREMENT</button>\n    <button onClick={()=>{actions.decrement()}}>DECREMENT</button>\n    <button onClick={()=>{actions.reset()}}>RESET</button>\n    <button onClick={()=>{actions.value20(20)}}>VALUE 20</button>\n  </div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StoreProvider } from \"./context/store/storeContext\";\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { types } from \"./types\";\n\n/**\n *\n * @param {obj} state Todo el state\n * @param {func} dispatch FunciÃ³n que dispacha la acciÃ³n\n */\nexport const useActions = (state, dispatch) => {\n  function increment() {\n    dispatch({ type: types.INCREMENT });\n  }\n  function decrement() {\n    dispatch({ type: types.DECREMENT });\n  }\n  function reset() {\n    dispatch({ type: types.RESET });\n  }\n  function value20(data) {\n    dispatch({ type: types.VALUE20, data });\n  }\n  return {\n    increment,\n    decrement,\n    reset,\n    value20\n  }\n};\n"],"sourceRoot":""}