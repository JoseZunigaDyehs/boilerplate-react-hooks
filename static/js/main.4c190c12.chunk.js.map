{"version":3,"sources":["context/reducers/generalReducer.js","context/initial/initialStates.js","context/reducers/reducers.js","context/actions/index.js","context/store/storeContext.js","App.js","serviceWorker.js","index.js","context/actions/generalActions.js"],"names":["generalReducer","state","action","type","Object","objectSpread","count","data","Error","initialState","generalStates","reducer","arguments","length","undefined","StoreContext","createContext","App","_useContext","useContext","actions","react_default","a","createElement","onClick","generalActions","increment","decrement","reset","setValue","Math","round","random","Boolean","window","location","hostname","match","ReactDOM","render","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","props","externSetValue","useActions","useEffect","console","log","newState","Provider","value","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kJAMaA,EAAiB,SAACC,EAAOC,GACpC,OAAQA,EAAOC,MACb,IAAK,YACH,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAOL,EAAMK,MAAQ,IAEzB,IAAK,YACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAOL,EAAMK,MAAQ,IAEzB,IAAK,QACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAO,IAEX,IAAK,YACH,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFH,EADL,CAEEK,MAAOJ,EAAOK,OAElB,QACE,MAAM,IAAIC,MAAM,uBC1BTC,EAAe,CAC1BC,cDH2B,CAC3BJ,MAAO,IEOHK,EAAU,WAAkC,IAAjCV,EAAiCW,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcP,EAAWU,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAChD,MAAO,CACLJ,cAAeV,EAAeC,EAAMS,cAAcR,KCL/C,ICCDa,EAAeC,wBAAcP,GCuBpBQ,EAxBH,WAAM,IAAAC,EACWC,qBAAWJ,GAA9Bd,EADQiB,EACRjB,MAAOmB,EADCF,EACDE,QAIf,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAItB,EAAMS,cAAcJ,OACxBe,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQJ,EAAQK,eAAeC,cAAhD,aAGAL,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQJ,EAAQK,eAAeE,cAAhD,aAGAN,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQJ,EAAQK,eAAeG,UAAhD,SAGAP,EAAAC,EAAAC,cAAA,UAAQC,QAAS,WAAQJ,EAAQK,eAAeI,SAd3CC,KAAKC,MAAM,IAAAD,KAAKE,SAAwB,MAc7C,kBCXcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACPlB,EAAAC,EAAAC,cHJoB,SAAAiB,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EAEZC,qBAAWhC,EAASF,GAFRmC,EAAAxC,OAAAyC,EAAA,EAAAzC,CAAAsC,EAAA,GAE/BzC,EAF+B2C,EAAA,GAExBE,EAFwBF,EAAA,GAIhCxB,EDNkB,SAACnB,EAAO6C,GAChC,MAAO,CACLrB,gBKP2BsB,ELOI,CAAC9C,QAAM6C,YKNjC,CACLpB,UAAY,WACVqB,EAAMD,SAAS,CAAE3C,KAAM,eAEzBwB,UAAW,WACToB,EAAMD,SAAS,CAAE3C,KAAM,eAEzByB,MAAO,WACLmB,EAAMD,SAAS,CAAE3C,KAAM,WAEzB0B,SAAU,SAACtB,IAOf,SAAwBwC,EAAMxC,GAC5BwC,EAAMD,SAAS,CAAE3C,KAAM,YAAaI,SANhCyC,CAAeD,EAAMxC,OAbG,IAACwC,EJWbE,CAAWhD,EAAO6C,GAIlC,OAFAI,oBAAU,kBAAMC,QAAQC,IAAI,CAAEC,SAAUpD,KAAU,CAACA,IAGjDoB,EAAAC,EAAAC,cAACR,EAAauC,SAAd,CAAuBC,MAAO,CAAEtD,QAAO6C,WAAU1B,YAC9CqB,IGNL,KACEpB,EAAAC,EAAAC,cAACiC,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4c190c12.chunk.js","sourcesContent":["//Define and export states of reducer\nexport const generalStates = {\n  count: 0\n}\n\n//Export reducer\nexport const generalReducer = (state, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        ...state,\n        count: state.count + 1\n      };\n    case \"DECREMENT\":\n      return {\n        ...state,\n        count: state.count - 1\n      };\n    case \"RESET\":\n      return {\n        ...state,\n        count: 0\n      };\n    case \"SET_VALUE\":\n      return {\n        ...state,\n        count: action.data\n      };\n    default:\n      throw new Error(\"Unexpected action\");\n  }\n};\n","import {Â generalStates } from '../reducers/generalReducer'\n\n//Export object with all separate state from reducers\nexport const initialState = {\n  generalStates\n};\n","import { initialState } from \"../initial/initialStates\";\nimport { generalReducer } from './generalReducer'\n\n/**\n * Export initialState and reducer\n * \n * reducer function, returns separate states,\n * Which have a separate reducer, who receives state and action.\n */\nconst reducer = (state = initialState, action) => {\n  return {\n    generalStates: generalReducer(state.generalStates,action)\n  }\n};\n\nexport { initialState, reducer };\n","import { generalActions } from './generalActions'\n\n/**\n * Export object with functions for each separate action, that receives an object {state,dispatch}\n * Return every actions \n */\nexport const useActions = (state, dispatch) => {\n  return {\n    generalActions: generalActions({state,dispatch}),\n  }\n};\n","import { initialState, reducer } from \"../reducers/reducers\";\nimport { useActions } from \"../actions\";\nimport React, { createContext, useReducer, useEffect } from \"react\";\n\n/**\n * Export StoreContext and StoreProvider\n */\nconst StoreContext = createContext(initialState);\nconst StoreProvider = ({ children }) => {\n  // Get state and dispatch from Reacts new API useReducer.\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // Get actions from useActions and pass it to Context\n  const actions = useActions(state, dispatch);\n  // Log new state\n  useEffect(() => console.log({ newState: state }), [state]);\n  // Render state, dispatch and actions\n  return (\n    <StoreContext.Provider value={{ state, dispatch, actions }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport { StoreContext, StoreProvider };\n","import React, { useContext } from \"react\";\nimport { StoreContext } from \"./context/store/storeContext\";\n\n/**\n * Principal Component\n */\nconst App = () => {\n  const { state, actions } = useContext(StoreContext);\n  const valueRandom = () => {\n    return Math.round(Math.random() * (1000 - 1) + 1);\n  };\n  return (\n    <div>\n      <p>{state.generalStates.count}</p>\n      <button onClick={() => { actions.generalActions.increment(); }}>\n        INCREMENT\n      </button>\n      <button onClick={() => { actions.generalActions.decrement(); }}>\n        DECREMENT\n      </button>\n      <button onClick={() => { actions.generalActions.reset(); }}>\n        RESET\n      </button>\n      <button onClick={() => { actions.generalActions.setValue(valueRandom()); }}>\n        VALUE RANDOM\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { StoreProvider } from \"./context/store/storeContext\";\n\n/**\n * RENDER \n * Store provider\n * - App Principal Child function\n */\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","//Export actions receiving an object {state,dispatch}\nexport const generalActions = (props) => {\n  return {\n    increment:  () => {\n      props.dispatch({ type: \"INCREMENT\" });\n    },\n    decrement: () => {\n      props.dispatch({ type: \"DECREMENT\" });\n    },\n    reset: () => {\n      props.dispatch({ type: \"RESET\" });\n    },\n    setValue: (data) => {\n      // props.dispatch({ type: \"SET_VALUE\", data });\n      externSetValue(props,data); // Extern function\n    }\n  }\n}\n// You can externalize the functions\nfunction externSetValue(props,data) {\n  props.dispatch({ type: \"SET_VALUE\", data});\n}\n"],"sourceRoot":""}